searchState.loadedDescShard("poc_kokkos_rs", 0, "Kokkos-rs: A Proof-of-Concept\nfunctor &amp; kernel related code\nparallel statement related code\ndata structure related code\n<code>parallel_for</code> kernel type. Depends on enabled feature(s).\nArguments of a team-based kernel.\nArguments of a one-dimensionnal kernel (e.g. a RangePolicy…\nArguments of a <code>N</code>-dimensionnal kernel (e.g. a MDRangePolicy…\nKernel argument enum\nSerial kernel type. Does not depend on enabled feature(s).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError occured during dispatch; The specific DispatchError …\nError raised when parallel hierarchy isn’t respected.\nWhat did I mean by this?\nEnum used to classify possible errors occuring in a …\nkernel dispatch code\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParallel For statement.\nparallel statement parameterization code\nError occured during parallel CPU dispatch.\nEnum used to classify possible dispatch errors.\nError occured during GPU dispatch.\nError occured during serial dispatch.\nCPU dispatch routine of <code>for</code> statements. Implementation …\nReturns the argument unchanged.\nGPU Dispatch routine of <code>for</code> statements. UNIMPLEMENTED\nCalls <code>U::from(self)</code>.\nCPU dispatch routine of <code>for</code> statements. Does not depend on …\nTarget the CPU. Execute the kernel in parallel by using a …\nTarget the GPU. UNIMPLEMENTED.\nDynamic scheduling. Workload is divided at start, split …\nExecution Policy enum. See Kokkos documentation for …\nExecution Space enum.\nN-dimensional iteration range.\nPolicy used to ensure each team execute the body once and …\nPolicy used to ensure each thread execute the body once …\nRange Policy enum.\n1D iteration range.\nScheduling enum. CURRENTLY IGNORED.\nDefault value. Execute the kernel sequentially.\nDefault value. Workload is divided once and split equally …\nTeam-based iteration policy.\nMedium-level depth. Can host further nests using vectors.\nMedium-level depth. Can host further nests using vectors.\nMedium-level depth. Cannot host further nests.\nMedium-level depth. Cannot host further nests.\nInner-level depth. Cannot host further nests.\nInner-level depth. Cannot host further nests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIteration pattern used to handle the workload.\nScheduling policy for the dispatch. CURRENTLY IGNORED.\nExecution space targetted by the dispatch.\nNumber of team.\nNumber of threads per team.\nNumber of vector\nCommon structure used as the backend of all <code>View</code> types. …\nEnum used to classify view-related errors.\nView type owning the data it yields access to, i.e. “…\nView type owning a read-only borrow to the data it yields …\nView type owning a mutable borrow to the data it yields …\nCreate a new View mirroring <code>self</code>, i.e. referencing the …\nCreate a new View mirroring <code>self</code>, i.e. referencing the …\nData container. Depending on the type, it can be a vector (…\nData container. Depending on the type, it can be a vector (…\nData container. Depending on the type, it can be a vector (…\nData container. Depending on the type, it can be a vector (…\nDimensions of the data represented by the view. The view …\nDimensions of the data represented by the view. The view …\nDimensions of the data represented by the view. The view …\nDimensions of the data represented by the view. The view …\nMapping function between N-indices and the flat offset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReading interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory layout of the view. Refer to Kokkos documentation …\nMemory layout of the view. Refer to Kokkos documentation …\nMemory layout of the view. Refer to Kokkos documentation …\nMemory layout of the view. Refer to Kokkos documentation …\nConstructor used to create owned views. See dedicated …\nConstructor used to create owned views. See dedicated …\nview parameterization code\nWriting interface.\nStride between each element of a given dimension. Computed …\nStride between each element of a given dimension. Computed …\nStride between each element of a given dimension. Computed …\nStride between each element of a given dimension. Computed …\nThe view borrows the data and can only read it.\nSupertrait with common trait that elements of a View …\nEnum used to identify the type of data the view is holding.\nGeneric alias for elements of type <code>T</code> of a View.\nEnum used to represent data layout. Struct enums is used …\nLowest stride for the first index, increasing stride as …\nMaximum possible depth (i.e. number of dimensions) for a …\nThe view borrows the data and can both read and modify it.\nThe view owns the data.\nHighest stride for the first index, decreasing stride as …\nCustom stride for each index. Must be compatible with …\nCompute correct strides of each index using dimensions and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")